{
	"info": {
		"_postman_id": "55fdb03f-c61e-4f39-8ccd-7522e424e124",
		"name": "CommentsTestCollection",
		"description": "Collection to test the comments API based on Spring Boot test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34623927"
	},
	"item": [
		{
			"name": "Create Initiator User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has user create response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test initiator user's 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"initiatorUserId\", jsonData.id);",
							"});",
							"pm.test(\"Test initiator user's 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql('initiator@domain.com');",
							"});",
							"pm.test(\"Test initiator user's 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql('Event initiator2');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"Event initiator2\", \"email\": \"initiator@domain.com\" }"
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has category create response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"categoryId\", jsonData.id);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql('CategoryName#@!$');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"CategoryName#@!$\" }"
				},
				"url": {
					"raw": "http://localhost:8080/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has event create response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"eventId\", jsonData.id);",
							"});",
							"pm.test(\"Test event 'title' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql('Possimus ab esse.');",
							"});",
							"pm.test(\"Test event 'participantLimit' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.participantLimit).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"Error sunt autem officia reprehenderit voluptas cum porro fuga vel. Magnam et sit. At quas recusandae quia. Provident incidunt officiis.\",\n    \"category\": {{categoryId}},\n    \"description\": \"Vero quo sed. Sit architecto quia cum qui voluptatem hic et. Fuga illum quibusdam iste. Voluptatibus officiis nulla nemo illo. Autem aliquam et possimus illo unde quam et eos.n rEa exercitationem ea non architecto. Quia ut tempora et iste accusantium ratione a voluptatibus voluptates. Eos reiciendis necessitatibus dolores voluptatem ducimus inventore. Sit provident dignissimos praesentium dolores. Porro ut aut. Qui cum ut quam veniam minus quia nemo voluptatem.n rMagnam porro ab. Voluptas in inventore dolores harum veritatis impedit consectetur expedita. Illo aut iure magni ut. Quia dolores quidem est amet dolores incidunt omnis facilis. Accusamus ipsa praesentium.\",\n    \"eventDate\": \"2024-12-31 20:52:21\",\n    \"location\": {\n        \"lat\": -24.5189,\n        \"lon\": 141.4601\n    },\n    \"paid\": false,\n    \"participantLimit\": 1,\n    \"requestModeration\": true,\n    \"title\": \"Possimus ab esse.\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/users/{{initiatorUserId}}/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{initiatorUserId}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment to Unpublished Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"eventId\": {{eventId}}, \"text\": \"Terrible event\" }"
				},
				"url": {
					"raw": "http://localhost:8080/users/{{initiatorUserId}}/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{initiatorUserId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has event publish response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test published event 'state' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.state).to.eql('PUBLISHED');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"stateAction\": \"PUBLISH_EVENT\"}"
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/{{eventId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"{{eventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has user create response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test user's 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"userId\", jsonData.id);",
							"});",
							"pm.test(\"Test user's 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql('user@domain.com');",
							"});",
							"pm.test(\"Test user's 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql('user');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"user\", \"email\": \"user@domain.com\" }"
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment by Non-participant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"eventId\": {{eventId}}, \"text\": \"Beautiful event\" }"
				},
				"url": {
					"raw": "http://localhost:8080/users/{{userId}}/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{userId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Request for Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has request create response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test request 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"requestId\", jsonData.id);",
							"});",
							"pm.test(\"Test request 'status' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('PENDING');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/users/{{userId}}/requests?eventId={{eventId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{userId}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Approve Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the test to handle potential undefined properties",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has request approve response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test approved request 'status' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.confirmedRequests[0].status).to.eql('CONFIRMED');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"requestIds\": [{{requestId}}], \"status\": \"CONFIRMED\" }"
				},
				"url": {
					"raw": "http://localhost:8080/users/{{initiatorUserId}}/events/{{eventId}}/requests",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{initiatorUserId}}",
						"events",
						"{{eventId}}",
						"requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment by Participant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed syntax error by replacing jsonBody() with json()",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has comment create response\", function () {",
							"    pm.expect(pm.response.json()).to.be.ok;",
							"});",
							"pm.test(\"Test comment 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"commentId\", jsonData.id);",
							"});",
							"pm.test(\"Test comment 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.text).to.eql('Mediocre event');",
							"});",
							"pm.test(\"Test comment 'created' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('created');",
							"});",
							"pm.test(\"Test comment 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eventId\"));",
							"});",
							"pm.test(\"Test comment 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get(\"userId\"));",
							"});",
							"pm.test(\"Test comment 'edited' field is null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.edited).to.eql(null);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"eventId\": {{eventId}}, \"text\": \"Mediocre event\" }"
				},
				"url": {
					"raw": "http://localhost:8080/users/{{userId}}/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{userId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has comment update response\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"pm.test(\"Test updated comment 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"commentId\"));",
							"});",
							"pm.test(\"Test updated comment 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.text).to.eql('Decent event.');",
							"});",
							"pm.test(\"Test updated comment 'created' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('created');",
							"});",
							"pm.test(\"Test updated comment 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eventId\"));",
							"});",
							"pm.test(\"Test updated comment 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get(\"userId\"));",
							"});",
							"pm.test(\"Test updated comment 'edited' field is not null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.edited).to.not.eql(null);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"text\": \"Decent event.\" }"
				},
				"url": {
					"raw": "http://localhost:8080/users/{{userId}}/comments/{{commentId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{userId}}",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search for a comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('Has comment response', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/{{eventId}}?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eventId}}"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 204', function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search for a comment after deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('No comments found after deletion', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData.length).to.eql(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/{{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eventId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "initiatorUserId",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "requestId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}